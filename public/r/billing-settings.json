{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "billing-settings",
  "type": "registry:block",
  "title": "Billing Settings",
  "description": "A comprehensive billing settings component with tabs for general, payment methods, invoices, and usage limits",
  "dependencies": [
    "lucide-react",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "card",
    "switch",
    "badge",
    "dropdown-menu",
    "dialog",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/billing-settings.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { ChevronDown, CreditCard, Plus } from \"lucide-react\"\n\nconst tabs = [\n  { id: \"general\", label: \"General\" },\n  { id: \"payment\", label: \"Payment\" },\n  { id: \"invoices\", label: \"Invoices\" },\n  { id: \"limits\", label: \"Limits\" },\n]\n\ninterface CardInfo {\n  id: string\n  last4: string\n  brand: string\n  expiry: string\n  primary?: boolean\n}\n\ninterface BillingSettingsProps {\n  \n  activeTab: string\n  onTabChange: (tab: string) => void\n\n  \n  emailNotifications: boolean\n  onEmailNotificationsChange: (value: boolean) => void\n\n  usageAlerts: boolean\n  onUsageAlertsChange: (value: boolean) => void\n\n  invoiceReminders: boolean\n  onInvoiceRemindersChange: (value: boolean) => void\n\n  \n  cards: CardInfo[]\n  onAddCard: () => void\n\n  \n  invoiceFormat: \"PDF\" | \"HTML\"\n  onInvoiceFormatChange: (format: \"PDF\" | \"HTML\") => void\n  onEditBillingAddress: () => void\n\n  \n  overageProtection: boolean\n  onOverageProtectionChange: (value: boolean) => void\n\n  usageLimitAlerts: boolean\n  onUsageLimitAlertsChange: (value: boolean) => void\n  className?: string\n}\n\ninterface SettingItemProps {\n  title: string\n  description: string\n  checked: boolean\n  onCheckedChange: (checked: boolean) => void\n}\n\nfunction SettingItem({ title, description, checked, onCheckedChange }: SettingItemProps) {\n  const switchId = `switch-${title.toLowerCase().replace(/\\s+/g, '-')}`;\n  \n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-[1fr_auto] items-start py-4 gap-3 sm:gap-4 w-full\">\n      <div className=\"space-y-1 min-w-0\">\n        <h3 id={switchId} className=\"font-medium text-foreground break-words hyphens-auto\">\n          {title}\n        </h3>\n        <p className=\"text-sm text-muted-foreground break-words hyphens-auto\">\n          {description}\n        </p>\n      </div>\n      <div className=\"sm:justify-self-end\">\n        <Switch \n          id={switchId}\n          checked={checked}\n          onCheckedChange={onCheckedChange}\n          className=\"flex-shrink-0\"\n          aria-labelledby={`${switchId}-label`}\n        />\n      </div>\n    </div>\n  )\n}\n\ninterface TabNavigationProps {\n  activeTab: string\n  onTabChange: (tab: string) => void\n}\n\nfunction TabNavigation({ activeTab, onTabChange }: TabNavigationProps) {\n  return (\n    <div className=\"grid grid-cols-4 sm:flex sm:flex-wrap gap-0.5 sm:gap-1 rounded-lg bg-muted p-0.5 sm:p-1\">\n      {tabs.map((tab) => (\n        <button\n          key={tab.id}\n          onClick={() => {\n            onTabChange(tab.id)\n          }}\n          className={`w-full sm:flex-1 min-w-0 rounded-md px-1 py-2 sm:px-3 sm:py-2 text-[10px] sm:text-sm leading-tight tracking-tighter font-medium transition-colors cursor-pointer inline-flex items-center justify-center ${\n            activeTab === tab.id\n              ? \"bg-background text-foreground shadow-sm\"\n              : \"text-muted-foreground hover:text-foreground hover:bg-background/50\"\n          }`}\n        >\n          {tab.label}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nexport function BillingSettings({\n  activeTab,\n  onTabChange,\n  emailNotifications,\n  onEmailNotificationsChange,\n  usageAlerts,\n  onUsageAlertsChange,\n  invoiceReminders,\n  onInvoiceRemindersChange,\n  cards,\n  onAddCard,\n  invoiceFormat,\n  onInvoiceFormatChange,\n  onEditBillingAddress,\n  overageProtection,\n  onOverageProtectionChange,\n  usageLimitAlerts,\n  onUsageLimitAlertsChange,\n  className,\n}: BillingSettingsProps) {\n  const renderGeneralContent = () => (\n    <div className=\"space-y-0 divide-y divide-border\">\n      <SettingItem\n        title=\"Email notifications\"\n        description=\"Receive billing updates via email\"\n        checked={emailNotifications}\n        onCheckedChange={onEmailNotificationsChange}\n      />\n      <SettingItem\n        title=\"Usage alerts\"\n        description=\"Get notified when approaching limits\"\n        checked={usageAlerts}\n        onCheckedChange={onUsageAlertsChange}\n      />\n      <SettingItem\n        title=\"Invoice reminders\"\n        description=\"Remind me before auto-renewal\"\n        checked={invoiceReminders}\n        onCheckedChange={onInvoiceRemindersChange}\n      />\n    </div>\n  )\n\n  const renderPaymentContent = () => (\n    <div className=\"space-y-4\">\n      {cards.map((card) => (\n        <div key={card.id} className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between rounded-lg border p-3 sm:p-4 gap-3\">\n          <div className=\"flex items-center space-x-2 sm:space-x-3 min-w-0 flex-1\">\n            <CreditCard className=\"h-6 w-6 sm:h-8 sm:w-8 text-muted-foreground flex-shrink-0\" />\n            <div className=\"min-w-0 flex-1\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-mono text-xs sm:text-sm truncate\">•••• •••• •••• {card.last4}</span>\n              </div>\n              <p className=\"text-xs sm:text-sm text-muted-foreground truncate\">\n                {card.brand} • Expires {card.expiry}\n              </p>\n            </div>\n          </div>\n          {card.primary && <Badge variant=\"secondary\" className=\"flex-shrink-0 text-xs self-start sm:self-auto\">Primary</Badge>}\n        </div>\n      ))}\n      <Button variant=\"outline\" className=\"w-full bg-transparent\" onClick={onAddCard}>\n        <Plus className=\"mr-2 h-4 w-4\" />\n        <span className=\"hidden sm:inline\">Add new card</span>\n        <span className=\"sm:hidden\">Add card</span>\n      </Button>\n    </div>\n  )\n\n  const renderInvoicesContent = () => (\n    <div className=\"space-y-4 sm:space-y-6\">\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-4\">\n        <div className=\"space-y-1 min-w-0 flex-1\">\n          <h3 className=\"font-medium text-foreground\">Invoice format</h3>\n          <p className=\"text-sm text-muted-foreground\">Choose PDF or HTML format</p>\n        </div>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"w-full sm:w-20 bg-transparent\">\n              {invoiceFormat}\n              <ChevronDown className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem onClick={() => onInvoiceFormatChange(\"PDF\")}>PDF</DropdownMenuItem>\n            <DropdownMenuItem onClick={() => onInvoiceFormatChange(\"HTML\")}>HTML</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-4\">\n        <div className=\"space-y-1 min-w-0 flex-1\">\n          <h3 className=\"font-medium text-foreground\">Billing address</h3>\n          <p className=\"text-sm text-muted-foreground\">Update your billing address</p>\n        </div>\n        <Button variant=\"outline\" onClick={onEditBillingAddress} className=\"w-full sm:w-auto\">\n          Edit\n        </Button>\n      </div>\n    </div>\n  )\n\n  const renderLimitsContent = () => (\n    <div className=\"space-y-0 divide-y divide-border\">\n      <SettingItem\n        title=\"Overage protection\"\n        description=\"Prevent accidental overages\"\n        checked={overageProtection}\n        onCheckedChange={onOverageProtectionChange}\n      />\n      <SettingItem\n        title=\"Usage limit alerts\"\n        description=\"Alert at 80% and 95% usage\"\n        checked={usageLimitAlerts}\n        onCheckedChange={onUsageLimitAlertsChange}\n      />\n    </div>\n  )\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"general\":\n        return renderGeneralContent()\n      case \"payment\":\n        return renderPaymentContent()\n      case \"invoices\":\n        return renderInvoicesContent()\n      case \"limits\":\n        return renderLimitsContent()\n      default:\n        return renderGeneralContent()\n    }\n  }\n\n  return (\n    <Card className={`mx-auto w-full max-w-2xl ${className || ''}`}>\n      <CardHeader className=\"space-y-4 px-4 sm:px-6\">\n        <CardTitle className=\"text-lg sm:text-xl\">Billing settings</CardTitle>\n        <TabNavigation activeTab={activeTab} onTabChange={onTabChange} />\n      </CardHeader>\n      <CardContent className=\"px-4 sm:px-6\">\n        <div className=\"w-full\">\n          {renderTabContent()}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/billing-settings.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/billing-settings-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Toaster, toast } from \"sonner\"\nimport { BillingSettings } from \"@/components/billingsdk/billing-settings\"\n\ntype InvoiceFormat = \"PDF\" | \"HTML\"\n\ninterface Card {\n  id: string\n  last4: string\n  brand: \"Visa\" | \"MasterCard\" | \"Amex\" | \"Other\"\n  expiry: string\n  primary: boolean\n}\n\ninterface NewCardForm {\n  number: string\n  expiry: string\n  cvc: string\n}\n\nexport default function BillingSettingsDemo() {\n  const [activeTab, setActiveTab] = useState<\"general\" | \"payment\" | \"invoices\" | \"limits\">(\"general\")\n  const [emailNotifications, setEmailNotifications] = useState<boolean>(true)\n  const [usageAlerts, setUsageAlerts] = useState<boolean>(true)\n  const [invoiceReminders, setInvoiceReminders] = useState<boolean>(false)\n  const [cards, setCards] = useState<Card[]>([\n    { id: \"1\", last4: \"4242\", brand: \"Visa\", expiry: \"12/25\", primary: true },\n  ])\n  const [invoiceFormat, setInvoiceFormat] = useState<InvoiceFormat>(\"PDF\")\n  const [overageProtection, setOverageProtection] = useState<boolean>(true)\n  const [usageLimitAlerts, setUsageLimitAlerts] = useState<boolean>(true)\n  const [newCard, setNewCard] = useState<NewCardForm>({\n    number: \"\",\n    expiry: \"\",\n    cvc: \"\",\n  })\n  const [open, setOpen] = useState<boolean>(false)\n\n\n  const handleToggleEmailNotifications = (checked: boolean) => {\n    console.log(`Email notifications toggled to: ${checked}`)\n    setEmailNotifications(checked)\n  }\n\n  const handleToggleUsageAlerts = (checked: boolean) => {\n    console.log(`Usage alerts toggled to: ${checked}`)\n    setUsageAlerts(checked)\n  }\n\n  const handleToggleInvoiceReminders = (checked: boolean) => {\n    console.log(`Invoice reminders toggled to: ${checked}`)\n    setInvoiceReminders(checked)\n  }\n\n  const handleChangeInvoiceFormat = (format: InvoiceFormat) => {\n    console.log(`Invoice format changed to: ${format}`)\n    setInvoiceFormat(format)\n  }\n\n  const handleEditBillingAddress = () => {\n    console.log(\"Edit billing address button clicked\")\n    toast.info(\"Edit billing address clicked!\")\n  }\n\n  const handleToggleOverageProtection = (checked: boolean) => {\n    console.log(`Overage protection toggled to: ${checked}`)\n    setOverageProtection(checked)\n  }\n\n  const handleToggleUsageLimitAlerts = (checked: boolean) => {\n    console.log(`Usage limit alerts toggled to: ${checked}`)\n    setUsageLimitAlerts(checked)\n  }\n\n  const isValidCardNumber = (number: string): boolean => {\n    const normalized = number.replace(/\\s/g, \"\")\n    return normalized.length >= 13 && normalized.length <= 19 && /^\\d+$/.test(normalized)\n  }\n\n  const isValidExpiry = (expiry: string): boolean => {\n    if (!/^(0[1-9]|1[0-2])\\/?([0-9]{2})$/.test(expiry)) {\n      return false\n    }\n    const [month, year] = expiry.split('/').map(Number)\n    const currentYear = Number(String(new Date().getFullYear()).slice(-2))\n    const currentMonth = new Date().getMonth() + 1\n    if (year < currentYear || (year === currentYear && month < currentMonth)) {\n      return false\n    }\n    return true\n  }\n\n  const isValidCvc = (cvc: string): boolean => {\n    return /^\\d{3,4}$/.test(cvc)\n  }\n \n  const detectCardBrand = (number: string): Card[\"brand\"] => {\n    if (number.startsWith(\"4\")) return \"Visa\"\n    if (/^5[1-5]/.test(number)) return \"MasterCard\"\n    if (/^3[47]/.test(number)) return \"Amex\"\n    return \"Other\"\n  }\n\n  const handleAddCard = (): void => {\n    if (!isValidCardNumber(newCard.number)) {\n      toast.error(\"Please enter a valid card number.\")\n      return\n    }\n    if (!isValidExpiry(newCard.expiry)) {\n      toast.error(\"Please enter a valid expiry date (MM/YY) that's not in the past.\")\n      return\n    }\n    if (!isValidCvc(newCard.cvc)) {\n      toast.error(\"Please enter a valid CVC.\")\n      return\n    }\n    const last4 = newCard.number.slice(-4)\n    const brand = detectCardBrand(newCard.number)\n    const newCardData: Card = {\n      id: String(cards.length + 1),\n      last4,\n      brand,\n      expiry: newCard.expiry,\n      primary: cards.length === 0,\n    }\n    setCards([...cards, newCardData])\n    setNewCard({ number: \"\", expiry: \"\", cvc: \"\" })\n    setOpen(false)\n    toast.success(\"Card added successfully!\")\n  }\n\n  const formatCardNumber = (value: string): string => {\n    const rawValue = value.replace(/\\D/g, '');\n    const formattedValue = rawValue.match(/.{1,4}/g)?.join(' ') || '';\n    return formattedValue;\n  };\n\n  return (\n    <div className=\"p-6\">\n      <BillingSettings\n        activeTab={activeTab}\n        onTabChange={(tab: string) => setActiveTab(tab as \"general\" | \"payment\" | \"invoices\" | \"limits\")}\n        emailNotifications={emailNotifications}\n        onEmailNotificationsChange={handleToggleEmailNotifications}\n        usageAlerts={usageAlerts}\n        onUsageAlertsChange={handleToggleUsageAlerts}\n        invoiceReminders={invoiceReminders}\n        onInvoiceRemindersChange={handleToggleInvoiceReminders}\n        cards={cards}\n        onAddCard={() => setOpen(true)}\n        invoiceFormat={invoiceFormat}\n        onInvoiceFormatChange={handleChangeInvoiceFormat}\n        onEditBillingAddress={handleEditBillingAddress}\n        overageProtection={overageProtection}\n        onOverageProtectionChange={handleToggleOverageProtection}\n        usageLimitAlerts={usageLimitAlerts}\n        onUsageLimitAlertsChange={handleToggleUsageLimitAlerts}\n      />\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add New Card</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"number\">Card Number</Label>\n              <Input\n                id=\"number\"\n                value={formatCardNumber(newCard.number)}\n                onChange={(e) => {\n                  const rawValue = e.target.value.replace(/\\s/g, '');\n                  setNewCard({ ...newCard, number: rawValue });\n                }}\n                placeholder=\"4111 1111 1111 1111\"\n              />\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"expiry\">Expiry</Label>\n                <Input\n                  id=\"expiry\"\n                  value={newCard.expiry}\n                  onChange={(e) =>\n                    setNewCard({ ...newCard, expiry: e.target.value })\n                  }\n                  placeholder=\"MM/YY\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"cvc\">CVC</Label>\n                <Input\n                  id=\"cvc\"\n                  value={newCard.cvc}\n                  onChange={(e) =>\n                    setNewCard({ ...newCard, cvc: e.target.value })\n                  }\n                  placeholder=\"123\"\n                />\n              </div>\n            </div>\n            <Button onClick={handleAddCard} className=\"w-full\">\n              Save Card\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n      <Toaster />\n    </div>\n  )\n}",
      "type": "registry:component",
      "target": "components/billing-settings-demo.tsx"
    }
  ]
}